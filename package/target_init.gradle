import com.github.jengelman.gradle.plugins.shadow.ShadowPlugin
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

initscript {
	dependencies {
		classpath files(System.getenv("runelite.pluginhub.package.lib"))
	}
}

allprojects {
	apply plugin: "java"
	apply plugin: ShadowPlugin

	compileJava {
		options.release.set(8)
	}

	tasks.withType(AbstractArchiveTask) {
		preserveFileTimestamps = false
		reproducibleFileOrder = true
	}

	def buildDir = new File(System.getenv("runelite.pluginhub.package.buildDir"));

	task runelitePluginHubPackage(type: ShadowJar) {
		destinationDir = buildDir
		archiveName = "plugin.jar"
		configurations = [project.configurations.runtimeClasspath]
		from sourceSets.main.output
	}

	task runelitePluginHubManifest {
		doLast {
			def props = new Properties()
			props["version"] = project.version
			new File(buildDir, "chunk.properties").withOutputStream {
				props.store(it, "")
			}
		}
	}

	task configured {
		def runeLiteDeps = [
			"client",
			"runelite-api",
			"http-api",
		]
		def version = System.getenv("runelite.pluginhub.package.runeliteVersion")
		configurations.all {
			resolutionStrategy.eachDependency { DependencyResolveDetails details ->
				if (details.requested.group == "net.runelite" && details.requested.name in runeLiteDeps) {
					details.useVersion version
				}
			}
		}
	}
}